{
  "name": "express-subdomain",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/bmullan91/express-subdomain.git"
  },
  "description": "Simple and lightweight middleware to handle subdomains",
  "main": "index.js",
  "scripts": {
    "test": "./test/pre-script.sh; ./node_modules/.bin/mocha --reporter spec; ./test/post-script.sh",
    "coverage": "./test/pre-script.sh; istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage; ./test/post-script.sh"
  },
  "keywords": [
    "express",
    "express-subdomain",
    "subdomain"
  ],
  "author": {
    "name": "Brian Mullan",
    "email": "bmullan91@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "express": "~4.1.1",
    "mocha": "~1.18.2",
    "request": "~2.34.0",
    "chai": "~1.9.1",
    "colors": "~0.6.2",
    "coveralls": "~2.10.0",
    "mocha-lcov-reporter": "0.0.1",
    "istanbul": "~0.2.10"
  },
  "readme": "[![Build Status](https://travis-ci.org/bmullan91/express-subdomain.svg?branch=master)](https://travis-ci.org/bmullan91/express-subdomain) [![Coverage Status](https://coveralls.io/repos/bmullan91/express-subdomain/badge.png?branch=master)](https://coveralls.io/r/bmullan91/express-subdomain?branch=master)\n\n#express-subdomain\n\nIs simply express middleware. In the examples below I am using [Express v4.x](http://expressjs.com/).\n\n##Install\n\nWith npm, saving it as a dependency.\n\n    npm i express-subdomain --save\n    \n##Simple usage\n\nLet's say you want to provide a RESTful API via the url `http://api.example.com`\n\n####Express boilerplate code:\n\n``` js\nvar subdomain = require('express-subdomain');\nvar express = require('express');\nvar app = express();\n\n// *** Code examples below go here! ***\n\n// example.com\napp.get('/', function(req, res) {\n    res.send('Homepage');\n});\n\n```\n\n####API Router\n\n``` js\nvar router = express.Router();\n\n//api specific routes\nrouter.get('/', function(req, res) {\n    res.send('Welcome to our API!');\n});\n\nrouter.get('/users', function(req, res) {\n    res.json([\n        { name: \"Brian\" }\n    ]);\n});\n```\n    \nNow register the subdomain middleware:\n``` js\napp.use(subdomain('api', router));\napp.listen(3000);\n```\nThe API is alive: \n\n`http://api.example.com/` --> \"Welcome to our API!\"\n\n`http://api.example.com/users` --> \"[{\"name\":\"Brian\"}]\"\n\n\n##Multi-level Subdomains\n\n``` js\napp.use(subdomain('v1.api', router)); //using the same router\n```\n\n`http://v1.api.example.com/` --> \"Welcome to our API!\"\n\n`http://v1.api.example.com/users` --> \"[{\"name\":\"Brian\"}]\"\n\n###Wildcards\n\nSay you wanted to ensure that the user has an API key before getting access to it... and this is across __all__ versions.\n\n_Note_:\nIn the example below, the passed function to subdomain can be just a pure piece of middleware.\n\n``` js\nvar checkUser = subdomain('*.api', function(req, res, next) {\n    if(!req.session.user.valid) {\n        return res.send('Permission denied.');\n    }\n    next();\n});\n\napp.use(checkUser);\n```\n    \nThis can be used in tandem with the examples above. \n\n_Note_:\nThe order in which the calls to app.use() is very important. Read more about it [here](http://expressjs.com/4x/api.html#app.use).\n\n``` js\napp.use(checkUser);\napp.use(subdomain('v1.api', router));\n```\n\n##Divide and Conquer\n    \nThe subdomains can also be chained, for example to achieve the same behaviour as above:\n\n``` js\nvar router = express.Router(); //main api router\nvar v1Routes = express.Router(); \nvar v2Routes = express.Router();\n\nv1Routes.get('/', function(req, res) {\n    res.send('API - version 1');\n});\nv2Routes.get('/', function(req, res) {\n    res.send('API - version 2');\n});\n\nvar checkUser = function(req, res, next) {\n    if(!req.session.user.valid) {\n        return res.send('Permission denied.');\n    }\n    next();\n};\n\n//the api middleware flow\nrouter.use(checkUser);\nrouter.use.(subdomain('*.v1', v1Routes));\nrouter.use.(subdomain('*.v2', v2Routes));\n\n//basic routing..\nrouter.get('/', function(req, res) {\n    res.send('Welcome to the API!');\n});\n\n//attach the api\napp.use(subdomain('api', router));\napp.listen(3000);\n```\n    \n####Invalid user\n\n`http://api.example.com/` --> Permission denied.\n\n####Valid user\n    \n`http://api.example.com/` --> Welcome to the API!\n\n`http://v1.api.example.com/` --> API - version 1\n\n`http://abc.v1.api.example.com/` --> API - version 1\n\n`http://v2.api.example.com/` --> API - version 2\n\n`http://abc.v2.api.example.com/` --> API - version 2\n\n##Need in-depth examples? \n\nHave a look at the [tests](https://github.com/bmullan91/express-subdomain/tree/master/test)!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bmullan91/express-subdomain/issues"
  },
  "homepage": "https://github.com/bmullan91/express-subdomain",
  "_id": "express-subdomain@1.0.0",
  "dist": {
    "shasum": "e59a2c216bb2efca3734fcf7a47320220fbf1da7"
  },
  "_from": "express-subdomain@1.0.0",
  "_resolved": "https://registry.npmjs.org/express-subdomain/-/express-subdomain-1.0.0.tgz"
}
